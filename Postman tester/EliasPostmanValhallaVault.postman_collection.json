{
	"info": {
		"_postman_id": "9cea8cb5-30b0-434d-b427-5bf8eecae990",
		"name": "EliasPostmanValhallaVault",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32627460"
	},
	"item": [
		{
			"name": "https://localhost:7214/api/Segment GET ALL SEGMENTS, CHECK PROPERTIES, NAME TO NOT BE EMPTY",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Segments has all properties\", function () {\r",
							"    var Segments = pm.response.json();\r",
							"    for(let segment of Segments){\r",
							"    pm.expect(segment).to.have.all.keys(\"id\", \"segmentName\", \"description\", \"categoryId\", \"category\", \"subcategories\");\r",
							"    }\r",
							"});\r",
							"pm.test(\"Segment names is not empty\", function () {\r",
							"    var Segments = pm.response.json();\r",
							"    for(let segment of Segments){\r",
							"    pm.expect(segment.segmentName).to.not.be.empty;\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:7214/api/Segment",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7214",
					"path": [
						"api",
						"Segment"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://localhost:7214/api/Segment POST SEGMENT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful creation of segment\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"segmentName\": \"test\",\r\n    \"description\": \"TestDesc\",\r\n    \"categoryId\": \"1\"\r\n}\r\n\r\n        // \"id\": 1,\r\n        // \"segmentName\": \"Del 1\",\r\n        // \"description\": null,\r\n        // \"categoryId\": 1,\r\n        // \"category\": null,\r\n        // \"subcategories\": null",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7214/api/Segment",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7214",
					"path": [
						"api",
						"Segment"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://localhost:7214/api/Segment/16 POST TESTS (GET SEGMENT BY ID)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Segment hämtat, status-kod 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Segment-id är korrekt\", function () {\r",
							"    var segment = pm.response.json();\r",
							"    pm.expect(segment.id).to.eql(18);\r",
							"});\r",
							"\r",
							"pm.test(\"Segment-namn är korrekt\", function () {\r",
							"    pm.expect(pm.response.json().segmentName).to.eql(\"test\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7214/api/Segment/18",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7214",
					"path": [
						"api",
						"Segment",
						"18"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://localhost:7214/api/Segment UPDATE SEGMENT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7214/api/Segment?segmentId=18&newSegmentText=NewSegmentText",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7214",
					"path": [
						"api",
						"Segment"
					],
					"query": [
						{
							"key": "segmentId",
							"value": "18"
						},
						{
							"key": "newSegmentText",
							"value": "NewSegmentText"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "https://localhost:7214/api/Segment/16 POST TESTS (GET SEGMENT BY ID) Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Segment hämtat, status-kod 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Segment-id är korrekt\", function () {\r",
							"    var segment = pm.response.json();\r",
							"    pm.expect(segment.id).to.eql(18);\r",
							"});\r",
							"\r",
							"pm.test(\"Segment-namn är korrekt\", function () {\r",
							"    pm.expect(pm.response.json().description).to.eql(\"NewSegmentText\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7214/api/Segment/18",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7214",
					"path": [
						"api",
						"Segment",
						"18"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://localhost:7214/api/Segment/ DELETE SEGMENT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status-koden är 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "// {\r\n//     \"id\": 2\r\n// }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7214/api/Segment/18",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7214",
					"path": [
						"api",
						"Segment",
						"18"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://localhost:7214/api/Segment GET ALL SEGMENTS, CHECK PROPERTIES, NAME TO NOT BE EMPTY Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"var idToCheck = \"16\";\r",
							"\r",
							"pm.test(\"Elementet med ID \" + idToCheck + \" finns inte\", function() {\r",
							"    pm.expect(jsonData).to.not.have.property(idToCheck);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:7214/api/Segment",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7214",
					"path": [
						"api",
						"Segment"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://localhost:7214/api/Category TO HAVE ALL CATEGORIES AND NAMES TO NOT BE EMPTY",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Categories has all properties\", function () {\r",
							"    var Categories = pm.response.json();\r",
							"    for(let category of Categories){\r",
							"    pm.expect(category).to.have.all.keys(\"id\", \"categoryName\", \"description\", \"segments\");\r",
							"    }\r",
							"});\r",
							"pm.test(\"Category names is not empty\", function () {\r",
							"    var Categories = pm.response.json();\r",
							"    for(let category of Categories){\r",
							"    pm.expect(category.categoryName).to.not.be.empty;\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:7214/api/Category",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7214",
					"path": [
						"api",
						"Category"
					]
				}
			},
			"response": []
		}
	]
}