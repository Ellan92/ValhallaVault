// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ValhallaVault.Data;

#nullable disable

namespace ValhallaVault.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240308065742_initCreate")]
    partial class initCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ValhallaVault.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ValhallaVault.Models.CategoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Att skydda sig mot bedrägerier",
                            Description = "Syftar på att ta försiktighetsåtgärder för att undvika att bli lurad eller manipulerad av bedrägliga aktiviteter eller människor. Det innebär att vara medveten om potentiella risker, att vara försiktig med personlig information och att utveckla strategier för att identifiera och undvika bedrägerier"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Cybersäkerhet för företag",
                            Description = "Detta innebär att implementera en serie av säkerhetsåtgärder och bästa praxis för att skydda företagets digitala tillgångar, information och system från cyberhot och attacker. Det omfattar vanligtvis användningen av tekniska lösningar som brandväggar, antivirusprogram, kryptering och säkerhetskopiering, samt etablering av säkerhetspolicyer och rutiner för att hantera risker och incidenter."
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Cyberspionage",
                            Description = "Cyberspionage är en form av spionage där angripare använder digitala metoder för att infiltrera och stjäla konfidentiell information från organisationer, myndigheter eller enskilda individer. Det innebär vanligtvis användning av avancerade tekniker såsom malware, phishing och social engineering för att få tillgång till känslig data utan att upptäckas."
                        });
                });

            modelBuilder.Entity("ValhallaVault.Models.QuestionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Options")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubcategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Options = "[\"Ett legitimt f\\u00F6rs\\u00F6k fr\\u00E5n banken att skydda ditt konto\",\"En informationsinsamling f\\u00F6r en marknadsunders\\u00F6kning\",\"Ett potentiellt telefonbedr\\u00E4geri\"]",
                            Question = "Du får ett oväntat telefonsamtal från någon som påstår sig vara från din bank. Personen ber dig bekräfta ditt kontonummer och lösenord för att säkerställa din kontos säkerhet efter en påstådd säkerhetsincident. Hur bör du tolka denna situation?",
                            SubcategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            Question = "Efter flera månader av daglig kommunikation med någon du träffade på en datingsida, börjar personen berätta om en plötslig finansiell kris och ber om din hjälp genom att överföra pengar. Vad indikerar detta mest sannolikt?",
                            SubcategoryId = 2
                        },
                        new
                        {
                            Id = 3,
                            Question = "Du får ett e-postmeddelande/samtal om ett exklusivt erbjudande att investera i ett startup-företag som påstås ha en revolutionerande ny teknologi, med garantier om exceptionellt hög avkastning på mycket kort tid. Hur bör du förhålla dig till erbjudandet?",
                            SubcategoryId = 3
                        },
                        new
                        {
                            Id = 4,
                            Question = "Efter en online-shoppingrunda märker du oidentifierade transaktioner på ditt kreditkortsutdrag från företag du aldrig handlat från. Vad indikerar detta mest sannolikt?",
                            SubcategoryId = 4
                        });
                });

            modelBuilder.Entity("ValhallaVault.Models.ResultModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("ResultModel");
                });

            modelBuilder.Entity("ValhallaVault.Models.SegmentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SegmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Segments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            SegmentName = "Del 1"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            SegmentName = "Del 2"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            SegmentName = "Del 3"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            SegmentName = "Del 1"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            SegmentName = "Del 2"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            SegmentName = "Del 3"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            SegmentName = "Del 4"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            SegmentName = "Del 1"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            SegmentName = "Del 2"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            SegmentName = "Del 3"
                        });
                });

            modelBuilder.Entity("ValhallaVault.Models.SolutionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("Solutions");
                });

            modelBuilder.Entity("ValhallaVault.Models.SubcategoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SegmentId")
                        .HasColumnType("int");

                    b.Property<string>("SubCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SegmentId");

                    b.ToTable("Subcategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SegmentId = 1,
                            SubCategoryName = "Kreditkortsbedrägeri"
                        },
                        new
                        {
                            Id = 2,
                            SegmentId = 1,
                            SubCategoryName = "Romansbedrägeri"
                        },
                        new
                        {
                            Id = 3,
                            SegmentId = 1,
                            SubCategoryName = "Investeringsbedrägeri"
                        },
                        new
                        {
                            Id = 4,
                            SegmentId = 1,
                            SubCategoryName = "Telefonbedrägeri"
                        },
                        new
                        {
                            Id = 5,
                            SegmentId = 2,
                            SubCategoryName = "Bedrägerier i hemmet"
                        },
                        new
                        {
                            Id = 6,
                            SegmentId = 2,
                            SubCategoryName = "Identitetsstöld"
                        },
                        new
                        {
                            Id = 7,
                            SegmentId = 2,
                            SubCategoryName = "Nätfiske och bluffmejl"
                        },
                        new
                        {
                            Id = 8,
                            SegmentId = 2,
                            SubCategoryName = "Investeringsbedrägeri på nätet"
                        },
                        new
                        {
                            Id = 9,
                            SegmentId = 3,
                            SubCategoryName = "Abonnemangsfällor och falska fakturor"
                        },
                        new
                        {
                            Id = 10,
                            SegmentId = 3,
                            SubCategoryName = "Ransomware"
                        },
                        new
                        {
                            Id = 11,
                            SegmentId = 3,
                            SubCategoryName = "Statistik och förhållningssätt"
                        },
                        new
                        {
                            Id = 12,
                            SegmentId = 4,
                            SubCategoryName = "Digital säkerhet på företag"
                        },
                        new
                        {
                            Id = 13,
                            SegmentId = 4,
                            SubCategoryName = "Risker och beredskap"
                        },
                        new
                        {
                            Id = 14,
                            SegmentId = 4,
                            SubCategoryName = "Aktörer inom cyberbrott"
                        },
                        new
                        {
                            Id = 15,
                            SegmentId = 4,
                            SubCategoryName = "Ökad digital närvaro och distansarbete"
                        },
                        new
                        {
                            Id = 16,
                            SegmentId = 4,
                            SubCategoryName = "Cyberangrepp mot känsliga sektorer"
                        },
                        new
                        {
                            Id = 17,
                            SegmentId = 4,
                            SubCategoryName = "Cyberrånet mot Mersk "
                        },
                        new
                        {
                            Id = 18,
                            SegmentId = 5,
                            SubCategoryName = "Social engineering"
                        },
                        new
                        {
                            Id = 19,
                            SegmentId = 5,
                            SubCategoryName = "Nätfiske och skräppost"
                        },
                        new
                        {
                            Id = 20,
                            SegmentId = 5,
                            SubCategoryName = "Vishing"
                        },
                        new
                        {
                            Id = 21,
                            SegmentId = 5,
                            SubCategoryName = "Varning för vishing"
                        },
                        new
                        {
                            Id = 22,
                            SegmentId = 5,
                            SubCategoryName = "Identifiera VD-mejl"
                        },
                        new
                        {
                            Id = 23,
                            SegmentId = 5,
                            SubCategoryName = "Öneangrepp och presentkortsbluffar"
                        },
                        new
                        {
                            Id = 24,
                            SegmentId = 6,
                            SubCategoryName = "Virus, maskar och trojaner"
                        },
                        new
                        {
                            Id = 25,
                            SegmentId = 6,
                            SubCategoryName = "Så kan det gå till"
                        },
                        new
                        {
                            Id = 26,
                            SegmentId = 6,
                            SubCategoryName = "Nätverksintrång"
                        },
                        new
                        {
                            Id = 27,
                            SegmentId = 6,
                            SubCategoryName = "Dataintrång"
                        },
                        new
                        {
                            Id = 28,
                            SegmentId = 6,
                            SubCategoryName = "Hackad!"
                        },
                        new
                        {
                            Id = 29,
                            SegmentId = 6,
                            SubCategoryName = "Vägarna in"
                        },
                        new
                        {
                            Id = 30,
                            SegmentId = 7,
                            SubCategoryName = "Utpressningsvirus"
                        },
                        new
                        {
                            Id = 31,
                            SegmentId = 7,
                            SubCategoryName = "Attacker mot servrar"
                        },
                        new
                        {
                            Id = 32,
                            SegmentId = 7,
                            SubCategoryName = "Cyberangrepp i Norden"
                        },
                        new
                        {
                            Id = 33,
                            SegmentId = 7,
                            SubCategoryName = "It-brottslingarnas verktyg"
                        },
                        new
                        {
                            Id = 34,
                            SegmentId = 7,
                            SubCategoryName = "Mirai, Wannacry och fallet Düsseldorf"
                        },
                        new
                        {
                            Id = 35,
                            SegmentId = 7,
                            SubCategoryName = "De sårbara molnen"
                        },
                        new
                        {
                            Id = 36,
                            SegmentId = 8,
                            SubCategoryName = "Allmänt om cyberspionage"
                        },
                        new
                        {
                            Id = 37,
                            SegmentId = 8,
                            SubCategoryName = "Metoder för cyberspionage"
                        },
                        new
                        {
                            Id = 38,
                            SegmentId = 8,
                            SubCategoryName = "Säkerhetsskyddslagen"
                        },
                        new
                        {
                            Id = 39,
                            SegmentId = 8,
                            SubCategoryName = "Cyberspionagets aktörer"
                        },
                        new
                        {
                            Id = 40,
                            SegmentId = 9,
                            SubCategoryName = "Värvningsförsök"
                        },
                        new
                        {
                            Id = 41,
                            SegmentId = 9,
                            SubCategoryName = "Affärsspionage"
                        },
                        new
                        {
                            Id = 42,
                            SegmentId = 9,
                            SubCategoryName = "Påverkanskampanjer"
                        },
                        new
                        {
                            Id = 43,
                            SegmentId = 10,
                            SubCategoryName = "Svensk underrättelsetjänst och cyberförsvar"
                        },
                        new
                        {
                            Id = 44,
                            SegmentId = 10,
                            SubCategoryName = "Signalspaning, informationssäkerhet och 5G"
                        },
                        new
                        {
                            Id = 45,
                            SegmentId = 10,
                            SubCategoryName = "Samverkan mot cyberspionage"
                        });
                });

            modelBuilder.Entity("ValhallaVault.Models.UserResult", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ResultId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ResultId");

                    b.HasIndex("ResultId");

                    b.ToTable("UserResults");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ValhallaVault.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ValhallaVault.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ValhallaVault.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ValhallaVault.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ValhallaVault.Models.QuestionModel", b =>
                {
                    b.HasOne("ValhallaVault.Models.SubcategoryModel", "SubCategory")
                        .WithMany("Questions")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("ValhallaVault.Models.ResultModel", b =>
                {
                    b.HasOne("ValhallaVault.Models.QuestionModel", "Question")
                        .WithMany("Results")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ValhallaVault.Models.SegmentModel", b =>
                {
                    b.HasOne("ValhallaVault.Models.CategoryModel", "Category")
                        .WithMany("Segments")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ValhallaVault.Models.SolutionModel", b =>
                {
                    b.HasOne("ValhallaVault.Models.QuestionModel", "Question")
                        .WithOne("Solution")
                        .HasForeignKey("ValhallaVault.Models.SolutionModel", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ValhallaVault.Models.SubcategoryModel", b =>
                {
                    b.HasOne("ValhallaVault.Models.SegmentModel", "Segment")
                        .WithMany("Subcategories")
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("ValhallaVault.Models.UserResult", b =>
                {
                    b.HasOne("ValhallaVault.Models.ResultModel", "Result")
                        .WithMany("UserResults")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ValhallaVault.Data.ApplicationUser", "User")
                        .WithMany("UserResults")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Result");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ValhallaVault.Data.ApplicationUser", b =>
                {
                    b.Navigation("UserResults");
                });

            modelBuilder.Entity("ValhallaVault.Models.CategoryModel", b =>
                {
                    b.Navigation("Segments");
                });

            modelBuilder.Entity("ValhallaVault.Models.QuestionModel", b =>
                {
                    b.Navigation("Results");

                    b.Navigation("Solution")
                        .IsRequired();
                });

            modelBuilder.Entity("ValhallaVault.Models.ResultModel", b =>
                {
                    b.Navigation("UserResults");
                });

            modelBuilder.Entity("ValhallaVault.Models.SegmentModel", b =>
                {
                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("ValhallaVault.Models.SubcategoryModel", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
