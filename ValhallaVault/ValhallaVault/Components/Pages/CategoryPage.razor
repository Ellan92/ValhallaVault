@page "/CategoryPage/{categoryId:int}"
@using ValhallaVault.Models
@using ValhallaVault.Data
@inject ValhallaVault.Managers.GenericManager<CategoryModel> categoryManager
@inject ValhallaVault.Managers.GenericManager<SegmentModel> genericSegmentManager
@inject ValhallaVault.Managers.SegmentManager segmentManager
@inject ValhallaVault.Managers.CompletedSegmentManager completedSegmentManager
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthenticationProvider
@inject ValhallaVault.Managers.UserManager usermanager
@rendermode InteractiveServer

<PageTitle>Category page</PageTitle>

@if (chosenCategory != null)
{
    <div class="card" style="background-color: rgba(0, 15, 89, 0.71); padding: 2%; margin-top:5%;">
        <div class="card-body">
            <h3 class="card-title text-white font-monospace">Kategori: @chosenCategory.CategoryName</h3>
            @if (!string.IsNullOrEmpty(chosenCategory.Description))
            {
                <p class="card-text text-white font-monospace">@chosenCategory.Description</p>
            }
        </div>
    </div>
}
else
{
    <div class="alert alert-warning" role="alert">
        <h2>Category not found.</h2>
    </div>
}

@if (Segments.Count > 0)
{
    <div class="card mt-3" style="background-color: rgba(0, 15, 89, 0.71); padding: 4%;">
        <div class="card-body">
            <h3 class="card-title text-white font-monospace">Segment i kategorin</h3>
            @foreach (var segment in Segments)
            {
                <p class="text-white font-monospace">@segment.SegmentName</p>
            }
        </div>
    </div>
}

@if (OpenSegments.Count>0)
{
    <div class="card mt-3" style="background-color: rgba(0, 15, 89, 0.71); padding: 4%;">
        <div class="card-body">
            <h4 class="card-subtitle mb-2 text-white font-monospace">Öppna segment:</h4>
            <p class="text-white font-monospace">Nästa segment låses upp när du fått minst 80% rätt på det föregående segmentet.</p>
            @foreach (var segment in OpenSegments)
            {
                <a href="@($"SegmentPage/{segment.Id}/{categoryId}")" class="card-link text-white font-monospace">@segment.SegmentName</a>
            }
        </div>
    </div>
}



<a href="@($"Homepage")">Tillbaka</a>

@code {

    public CategoryModel? chosenCategory { get; set; }
    public List<SegmentModel> Segments { get; set; } = new();
    public string? Name { get; set; }
    private AuthenticationState? State;
    public bool SecondSegmentIsOpen = false; 
    public ApplicationUser? LoggedInUser { get; set; } 
    public List<CompletedSegmentModel> FinishedSegments { get; set; } = new();
    public List<SegmentModel> OpenSegments { get; set; } = new();
    public List<SegmentModel> ClosedSegments { get; set; } = new();


    [Parameter]
    public int categoryId { get; set; }


    protected override async Task OnInitializedAsync()
    {
        // Hitta den valda kategorin
        chosenCategory = await categoryManager.GetByIdAsync(categoryId);

        if (chosenCategory != null)
        {
            // Hämta alla segment utifrån kategori
            var segments = await segmentManager.GetSegmentsByCategoryIdAsync(categoryId);
            if (segments != null)
            {
                foreach (var segment in segments)
                {
                    // visa alla segment i kategorin 
                    Segments.Add(segment);
                }
                // Lägg till det första segmentet i listan över öppna segment, det ska alltid vara tillgängligt
                var firstSegment = Segments.First();
                OpenSegments.Add(firstSegment);
            }

            // Hämta den inloggade användaren
            State = await AuthenticationProvider.GetAuthenticationStateAsync();
            var user = State.User;
            Name = user.Identity.Name;

            var findtheUser = await usermanager.GetUserByNameAsync(Name);
            if (findtheUser != null)
            {
                LoggedInUser = findtheUser;
                // kolla om det finns några avklarade segment kopplade till denna user
                var finishedSegments = await completedSegmentManager.GetCompletedSegmentsByUserId(LoggedInUser.Id);
                if (finishedSegments!=null && finishedSegments.Any())
                {
                    FinishedSegments = finishedSegments;

                    foreach (var completedSegment in finishedSegments)
                    {

                        // Kolla om användaren klarat det första segmentet
                        int categoryIdOfCompletedSegment = completedSegment.CategoryId;
                        int segmentIdOfCompletedSegment = completedSegment.SegmentId;
                        var firstSegment = Segments.First();

                        // Om första segmentet är avklarat...
                        if (firstSegment.CategoryId == categoryIdOfCompletedSegment && firstSegment.Id == segmentIdOfCompletedSegment && !SecondSegmentIsOpen)
                        {
                            // ...Gör nästa segment tillgängligt 
                            SegmentModel? secondSegment = Segments[1];
                            if (secondSegment != null && !OpenSegments.Contains(secondSegment))
                            {
                                OpenSegments.Add(secondSegment);
                                SecondSegmentIsOpen = true;
                            }
                        }
                    }
                }    

                if (SecondSegmentIsOpen) // börja loopen om det andra segmentet är öppet 
                {
                    for (int i = 0; i < Segments.Count; i++)
                    {
                        if (i>=2 && finishedSegments!=null) // börja inte förrän man kommit till det tredje segmentet 
                        {
                            SegmentModel nextSegment = Segments[i]; // spara segmentet 
                            foreach (var completedSegment in finishedSegments)
                            {
                                if (nextSegment.CategoryId == completedSegment.CategoryId && nextSegment.Id == completedSegment.Id)
                                {
                                    // Gör segmentet tillgängligt 
                                    OpenSegments.Add(nextSegment);
                                }
                            }

                        }
                       
                    }

                }


            }
        }
    }
}
