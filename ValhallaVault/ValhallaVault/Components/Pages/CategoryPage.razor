@page "/CategoryPage/{categoryId:int}"
@using ValhallaVault.Models
@inject ValhallaVault.Managers.GenericManager<CategoryModel> categoryManager
@inject ValhallaVault.Managers.SegmentManager segmentManager

<PageTitle>Category page</PageTitle>

@if (chosenCategory != null)
{
    <div class="card" style="background-color: rgba(0, 15, 89, 0.71); padding: 2%; margin-top:5%;">
        <div class="card-body">
            <h3 class="card-title text-white font-monospace">Kategori: @chosenCategory.CategoryName</h3>
            @if (!string.IsNullOrEmpty(chosenCategory.Description))
            {
                <p class="card-text text-white font-monospace">@chosenCategory.Description</p>
            }
        </div>
    </div>
}
else
{
    <div class="alert alert-warning" role="alert">
        <h2>Category not found.</h2>
    </div>
}

@if (Segments.Count > 0)
{
    <div class="card mt-3" style="background-color: rgba(0, 15, 89, 0.71); padding: 4%;">
        <div class="card-body">
            <h2 class="card-title text-white font-monospace">Segment i kategorin</h2>
            <h4 class="card-subtitle mb-2 text-muted text-white font-monospace">Klicka på ett segment för att läsa mer om segmentet eller starta frågorna.</h4>
            @foreach (var segment in Segments)
            {
                <a href="@($"SegmentPage/{segment.Id}")" class="card-link text-white font-monospace">@segment.SegmentName</a>
            }
        </div>
    </div>
}

<a href="@($"Homepage")">Tillbaka</a>

@code {

    public CategoryModel? chosenCategory { get; set; }

    public List<SegmentModel> Segments { get; set; } = new();

    [Parameter]
    public int categoryId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Försök hitta en kategori med detta id
        chosenCategory = await categoryManager.GetByIdAsync(categoryId);

        if (chosenCategory!=null)
        {
            var segments = await segmentManager.GetSegmentsByCategoryIdAsync(categoryId);
            if (segments!=null)
            {
                foreach (var segment in segments)
                {
                    Segments.Add(segment);
                }
            }
        }

    }
}