@page "/QuestionPage/{chosenSegment:int}"
@using ValhallaVault.Models
@inject ValhallaVault.Managers.QuestionManager questionManager
@inject NavigationManager Navigation
@inject ValhallaVault.Managers.GenericManager<SegmentModel> genericManager
@inject ValhallaVault.Managers.SubcategoryManager subcategoryManager

<div class="container">
    <div class="row">
        <div class="col-md-12">
            <h3 class="mt-3">Frågor för subkategori</h3>

            @if (Questions != null && Questions.Any())
            {
                @foreach (var question in Questions)
                {
                    <div class="card mt-3">
                        <div class="card-body">
                            <h5>Fråga nummer: @Counter </h5>
                            <h4 class="card-title">@question.Question</h4>
                            <ul class="list-group">
                              
                                @if (question.Options != null && question.Options.Count > 0)
                                {
                                 
                                    @foreach (var option in question.Options)
                                    {
                                        <li class="list-group-item">
                                            <!-- När användaren klickar på ett option, skapa ett result
                                                 (ResultModel), sätt till true eller false beroende på om
                                                 valt option stämmer överens med solution.
                                            -->
                                            <!--@question.Solution.CorrectAnswer-->
                                            <a>Alternativ: @option</a>
                                        </li>
                                    }
                                }
                            </ul>
                        </div>
                    </div>
                    Counter++; // Öka räknaren med 1 efter varje iteration
                }
            }
            else
            {
                <div class="alert alert-warning mt-3" role="alert">
                    <p>No questions found for this subcategory.</p>
                </div>
            }

            <a href="@($"SegmentPage/{chosenSegment}")" class="btn btn-primary mt-3">Back to segment</a>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int chosenSegment { get; set; }

    public int Counter = 1;

    public SegmentModel? ChosenSegment { get; set; }

    public List<SubcategoryModel> Subcategories { get; set; } = new();

    private List<QuestionModel> Questions { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var segment = await genericManager.GetByIdAsync(chosenSegment);
        if (segment != null)
        {
            segment = ChosenSegment;

            var allSubcategories = await subcategoryManager.GetSubcategoriesBySegmentIdAsync(chosenSegment);
            if (allSubcategories != null)
            {
                foreach (var subcategory in allSubcategories)
                {
                    // skapa listan med subkategorier
                    Subcategories.Add(subcategory);

                }
              
                if (Subcategories.Count>0)
                {
                    // Hämta alla frågor för varje subkategori
                    foreach (var sc in Subcategories)
                    {
                        // en lista med frågor per subkategori 
                        var questionList = await questionManager.GetQuestionsBySubcategoryIdAsync(sc.Id);

                        // lägg till alla frågor till en och samma lista (Questions)
                        if (questionList!=null && questionList.Count>0)
                        {
                            foreach (var question in questionList)
                            {
                                Questions.Add(question);
                            }
                        }
                    }
                }
     
            }

        }
    }
}