@page "/QuestionPage/{segmentId:int}/{subcatId:int}/{categoryId:int}"
@using ValhallaVault.Models
@using ValhallaVault.Models.ViewModels
@using ValhallaVault.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject ValhallaVault.Managers.QuestionManager questionManager
@inject NavigationManager Navigation
@inject ValhallaVault.Managers.GenericManager<SegmentModel> genericManager
@inject ValhallaVault.Managers.GenericManager<ResultModel> genericResultManager
@inject ValhallaVault.Managers.GenericManager<SubcategoryModel> genericSubcategoryManager
@inject ValhallaVault.Managers.GenericManager<ApplicationUser> genericUserManager
@inject ValhallaVault.Managers.CompletionManager completionmanager
@inject ValhallaVault.Managers.SubcategoryManager subcategoryManager
@inject ValhallaVault.Managers.CompletedSubcategoryManager completedSubcategoryManager
@inject AuthenticationStateProvider AuthenticationProvider
@inject ValhallaVault.Managers.UserManager usermanager
@inject ValhallaVault.Managers.Factory factory
@inject SignInManager<ApplicationUser> SignInManager
@rendermode InteractiveServer

<style>
    a.pointer 
    {
        cursor: pointer; /* Ange pekare som muspekare */
    }

    .green-text
    {
        color: green;
        opacity: .7;
    }

    .red-text {
        color: red;
        opacity: .7;
    }
</style>
<div class="container" style="margin-top:5%;">
    <div class="row" style="background-color: rgba(0, 15, 89, 0.71);">
        <div class="col-md-12">

            @if (Subcategory!=null)
            {
                <h3 class="mt-3 text-white font-monospace" style="margin-top:5%;">Frågor för subkategori: @Subcategory.SubCategoryName</h3>
            }
      
            <p class="text-white font-monospace"><stronger>Återstående frågor: @Questions.Count </stronger></p>
         
            <!-- Observarade frågor -->
            @if (Questions != null && Questions.Any())
            {
                @foreach (var question in Questions)
                {
                    <div class="card mt-3">
                        <div class="card-body">
                            <h6>@question.Question</h6>
                            <ul class="list-group"> <!-- list-group för alla frågor, vare sig de är besvarade eller inte. -->
                                @if (question.Options != null && question.Options.Count > 0 && question.IsAnswered==false)
                                {
                                    @foreach (var option in question.Options)
                                    {
                                        <li class="list-group-item">
                                            <!-- När användaren klickar på ett option, skicka med både question och option -->
                                            <a class="pointer font-monospace" @onclick="(() => HandleOptionClick(question, option))">@option</a>
                                        </li>
                                    }
                                }
                            </ul>
                        </div>
                    </div>
                }
            }

            @if (FeedbackQuestion != null && FeedbackQuestion.Any() && ResultIsVisible == true)
            {
                <div class="container mt-3">
                    <div class="card">
                        <div class="card-body">
                            <h2>@Points poäng av @NumberOfQuestions möjliga</h2>
                            <h5 class="text-primary fw-bolder">@passOrNot</h5>
                            <div>
                                <h2>Frågor</h2>
                                <ol>
                                @foreach (var question in FeedbackQuestion)
                                {
                                    <li>@question</li>
                                }
                                </ol>

                                <h2>Dina svar</h2>
                                <ol>
                                @foreach (var answer in FeedbackAnswer)
                                {
                                    <li>@answer</li>
                                }
                                </ol>

                                <h2>Facit</h2>
                                <ol>
                                @foreach (var correct in FeedbackCorrected)
                                {
                                    <li>@correct</li>
                                }
                                </ol>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <button class="btn btn-primary" @onclick="SubmitQuiz" style="margin: 1%;">Lämna in</button>
            @if (MessageIsVisible==true)
            {
                <h6>Vänligen svara på alla frågor innan du lämnar in.</h6>
            }
            <a href="@($"SegmentPage/{SegmentId}/{CategoryId}")" class="btn btn-primary mt-3" style="margin: 1%;">Tillbaka</a>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public int subcatId { get; set; }

    [Parameter]
    public int CategoryId { get; set; }

    [Parameter]
    public int segmentId { get; set; }

    public SubcategoryModel Subcategory { get; set; }

    public int index;

    public int Points = 0;

    private bool MessageIsVisible = false;

    private bool ResultIsVisible = false;

    public string? UserName { get; set; }

    public int SegmentId { get; set; }

    public List<SubcategoryModel> Subcategories { get; set; } = new();

    public int NumberOfQuestions = 0;

    public List<QuestionViewModel> Questions { get; set; } = new();

    public List<QuestionViewModel> AnsweredQuestions { get; set; } = new();

    public List<UserResult> UserResultList { get; set; } = new();

    // strängar för att displaya resultat
    public List<String> FeedbackQuestion { get; set; } = new();

    public List<String> FeedbackAnswer { get; set; } = new();

    public List<String> FeedbackCorrected { get; set; } = new();

    public string passOrNot = "Du fick tyvärr inte tillräckligt många rätt för att godkännas i denna subkategori.";

    private ApplicationUser? signedIn; // representerar den inloggade användaren
    private AuthenticationState? State; // representerar autentiseringsstatusen för användaren



    protected override async Task OnParametersSetAsync()
    {
        // Hämta vald subkategori
        var subcategory = await genericSubcategoryManager.GetByIdAsync(subcatId);
        if (subcategory!=null)
        {
            Subcategory = subcategory; 

            // Hämta segmentet 
            int segmentid = subcategory.SegmentId;
            SegmentId = segmentid;
        }

        // Ladda in alla frågor 
        if (Questions.Count == 0)
        {
            await LoadQuestionsAsync();
        }

        NumberOfQuestions = Questions.Count;
    }


    private async Task LoadQuestionsAsync()
    {
        Questions.Clear();
        // Hämta alla frågor i subkategorin 
        var allQuestionsInSubcategory = await questionManager.GetQuestionsBySubcategoryIdAsync(subcatId);
        if (allQuestionsInSubcategory!=null && allQuestionsInSubcategory.Any())
        {
            foreach (var question in allQuestionsInSubcategory)
            {
                // Lägg till alla frågor från subkategorin
                QuestionViewModel questionViewmodel = factory.CreateQuestionViewModel(question);
                Questions.Add(questionViewmodel);
            }
        }

    }

    private async Task AddSubcategoryCompletionToUser()
    {
        // Hämta den inloggade användaren
        State = await AuthenticationProvider.GetAuthenticationStateAsync();
        var user = State.User;
        UserName = user.Identity.Name;
        var findtheUser = await usermanager.GetUserByNameAsync(UserName);

        if (findtheUser != null)
        {

          // Skapa en ny completedSubcategory
            CompletedSubcategoryModel completedSubcategory = new CompletedSubcategoryModel
                    {
                        ApplicationUser = findtheUser,
                        SubcategoryId = Subcategory.Id,
                        CategoryId = CategoryId,
                        SegmentId = SegmentId
           };

           // Lägg till i användarens lista
           findtheUser.CompletedSubcategories.Add(completedSubcategory);
            passOrNot = "Grattis! Du blev godkänd i denna subkategori. ";

                // Spara i databasen
                await genericUserManager.CompleteAsync();

        }
    }


    private async Task SubmitQuiz()
    {
        int answeredQuestions = AnsweredQuestions.Count;
        if (answeredQuestions < NumberOfQuestions)
        {
            MessageIsVisible = true; // Visa meddelandet om att alla frågor måste besvaras.
        }
        else if (answeredQuestions == NumberOfQuestions)
        {
            bool UserPassedSubcategory = completionmanager.UserPassedSubcategory(Subcategory, Points);
            if (UserPassedSubcategory)
            {
                // Lägg till en ny CompletedCategory
                 await AddSubcategoryCompletionToUser();

            }

            Questions.Clear();
            ResultIsVisible = true;
            StateHasChanged(); // Tvinga en uppdatering av komponenten
        }
    }


    private async Task HandleOptionClick(QuestionViewModel question, string chosenOption)
    {
        question.IsAnswered = true;
        Questions.Remove(question);
        AnsweredQuestions.Add(question);

        var solutionToQuestion = await questionManager.GetSolutionByQuestionId(question.QuestionId);
        if (solutionToQuestion != null)
        {
            string solution = solutionToQuestion.CorrectAnswer;
            bool isCorrectAnswer = chosenOption.Equals(solutionToQuestion.CorrectAnswer);

            ResultModel newResult = null;
            if (isCorrectAnswer) // skapa ett userResult som är korrekt 
            {
                question.IsCorrectAnswer = true;
                newResult = factory.CreateCorrectResult(chosenOption, true, question.QuestionId);

                // Skapa resultat-strängarna
                FeedbackQuestion.Add($"\nFråga: {question.Question}");
                FeedbackAnswer.Add($"\nDitt svar: {chosenOption}");
                FeedbackCorrected.Add($"\nRätt svar: {solution}");
            }
            else // skapa ett userResult som inte är korrekt 
            {
                question.IsCorrectAnswer = false;
                newResult = factory.CreateWrongResult(chosenOption, false, question.QuestionId);
                // Skapa resultat-strängarna
                FeedbackQuestion.Add($"\nFråga: {question.Question}");
                FeedbackAnswer.Add($"\nDitt svar: {chosenOption}");
                FeedbackCorrected.Add($"\nRätt svar: {solution}");
            }

            await genericResultManager.CompleteAsync();

            State = await AuthenticationProvider.GetAuthenticationStateAsync();
            var user = State.User;
            UserName = user.Identity.Name;
            var findtheUser = await usermanager.GetUserByNameAsync(UserName);

            if (findtheUser != null)
            {
                // om det redan finns ett UserResult på denna användare så ska det tas bort först 
                var existingResult = findtheUser.UserResults.FirstOrDefault(ur => ur.Result.QuestionId == question.QuestionId);
                if (existingResult != null)
                {
                    // Ta bort det befintliga UserResult-objektet
                    findtheUser.UserResults.Remove(existingResult);
                    UserResultList.Remove(existingResult); 
                    // Spara ändringarna i databasen
                    await genericUserManager.CompleteAsync();
                }

                // annars- skapa ett nytt UserResult-objekt direkt 
                var userresult = factory.CreateUserResult(findtheUser, newResult);
                if (userresult != null)
                {
                    // Lägg till det nya UserResult-objektet för användaren
                    UserResultList.Add(userresult);
                    findtheUser.UserResults.Add(userresult);

                    // Spara ändringar i databasen
                    await genericUserManager.CompleteAsync();

                    if (newResult.IsCorrect == true)
                    {
                        Points++;
                    }
                }
            }
        }
    }
}
    
