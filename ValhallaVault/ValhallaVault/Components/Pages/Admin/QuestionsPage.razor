@page "/questionspage"

@using Microsoft.AspNetCore.Authorization
@using ValhallaVault.Data.Repository
@using ValhallaVault.Managers
@using ValhallaVault.Models
@using Blazored
@using Blazored.Modal
@using Blazored.Modal.Services
@attribute [Authorize(Roles = "Admin")]
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider provider
@inject GenericRepo<CategoryModel> categoryRepo
@inject GenericRepo<SegmentModel> segmentRepo
@inject GenericRepo<SubcategoryModel> subcategoryRepo
@inject GenericRepo<QuestionModel> questionRepo
@inject GenericManager<QuestionModel> genericQuestionManager
@inject GenericManager<SubcategoryModel> genericSubcategoryManager
@inject QuestionManager questionManager
@inject IModalService modal
@rendermode InteractiveServer




<div style=" background-image: url('/Images/AdminPageV2.jpg'); background-size: cover; background-position: center top; height: 100%; display: flex; flex-direction: column; justify-content: flex-start; align-items: center;">
	<h1 class="text-white display-2">Subcategories</h1>
	<div style="width: 2%; height: 0%;"></div>
	<ul class="list-unstyled">
		@if (AllQuestions != null)
		{
			@foreach (var question in AllQuestions)
			{
				<li class="text-white">@question.Question</li>

				<button @onclick="() => ShowEditDetails(question.Id)" class="btn btn-outline-light btn-lg">Edit</button>
				@if (isEditDetailsShown && questionId == question.Id)
				{
					<div>
						@{
							userInput.questionName = question.Question;
						}
						<strong class="text-white">Question Title: </strong><input class="form-control" type="text" @bind-value="userInput.questionName"></input>
						<br/>
						<strong class="text-white">Options:</strong>
						<br/>
						@if (optionViewModels != null)
						{
							@foreach (var optionViewModel in optionViewModels)
							{
								if(optionViewModel.QuestionId == question.Id)
								{
									<input @bind="optionViewModel.Option" placeholder="@optionViewModel.Option"></input>
									<br />
								}

							}
						}
						<button @onclick="() => UpdateQuestion(question)" class="btn btn-outline-light">Update</button>
						<button @onclick="() => DeleteQuestion(question)" class="btn btn-outline-light">Delete</button>
						<button @onclick="HideEditDetails" class="btn btn-outline-light">Cancel</button>
						@if (isQuestionDeleted)
						{
							<p class="bg-danger">Segment: @question.Question deleted successfully.</p>
						}
					</div>
				}

			}
		}
	</ul>
	<div style="width: 2%; height: 0%;"></div>

</div>

@code {
	public List<SubcategoryModel> AllSubcategories = new();

	public List<QuestionModel> AllQuestions = new();

	public QuestionModel Question;

	public List<string> options;

	public string optionTitle;

	private string[]? optionTitles;

	private List<OptionViewModel>? optionViewModels;

	private int index;

	public class UserInput
	{
		public string questionName { get; set; }

	}

	private UserInput userInput = new UserInput();

	public string questionDescription;

	public bool isEditDetailsShown = false;

	public bool isQuestionDeleted = false;

	public int questionId;

	protected override async Task OnInitializedAsync()
	{

		Question = await genericQuestionManager.GetByIdAsync(questionId);
		AllQuestions = await genericQuestionManager.GetAllAsync();
		AllSubcategories = await genericSubcategoryManager.GetAllAsync();

		if (AllQuestions != null)
		{
			int totalOptionTitles = 0;

			optionViewModels = new();

			foreach (var question in AllQuestions)
			{
				int optionIndex = 0;

				foreach(var option in question.Options)
				{
					totalOptionTitles++;

					OptionViewModel optionViewModel = new()
					{
						Option = option,
						QuestionId = question.Id,
						OptionIndex = optionIndex
					};

					optionViewModels.Add(optionViewModel);

					optionIndex++;
				}
			}

			optionTitles = new string[totalOptionTitles];
		}
	}

	public async Task GetAllCategories()
	{
		await genericQuestionManager.GetAllAsync();
	}

	public async Task ShowEditDetails(int selectedQuestionId)
	{
		isEditDetailsShown = true;

		questionId = selectedQuestionId;
	}
	public async Task HideEditDetails()
	{
		isEditDetailsShown = false;
	}
	public async Task UpdateQuestion(QuestionModel questionToUpdate)
	{
		// options.Add(optionTitle);

		if(userInput.questionName != "")
		{
			// await questionManager.UpdateQuestionAsync(questionId, userInput.questionName);
		}

		List<string> viewModelOptions = optionViewModels.Where(v => v.QuestionId == questionToUpdate.Id).Select(v => v.Option).ToList();

		for (int i = 0; i < questionToUpdate.Options.Count(); i++)
		{
			if(questionToUpdate.Options[i] != viewModelOptions[i])
			{
				questionToUpdate.Options[i] = viewModelOptions[i];
			}
		}

		await questionManager.UpdateQuestionAndOptionsAsync(questionId, userInput.questionName, viewModelOptions);

		// await questionManager.UpdateQuestionAndOptionsAsync(questionId, questionName, options);

		// await subcategoryManager.UpdateSubcategoryDescriptionAsync(subcategoryId, subcategoryDescription);
	}
	public async Task DeleteQuestion(QuestionModel questionToDelete)
	{
		if (questionToDelete != null)
		{
			await genericQuestionManager.DeleteAsync(questionId);
			isQuestionDeleted = true;

		}


	}

	private sealed class OptionViewModel
	{
		public string? Option { get; set; }

		public int QuestionId { get; set; }

		public int OptionIndex { get; set; }
	}
}
