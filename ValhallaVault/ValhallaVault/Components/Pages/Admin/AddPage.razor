@page "/addpage"
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using ValhallaVault.Data.Repository
@using ValhallaVault.Managers
@using ValhallaVault.Models
@attribute [Authorize(Roles = "Admin")]
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider provider
@inject GenericRepo<CategoryModel> categoryRepo
@inject GenericRepo<SegmentModel> segmentRepo
@inject GenericRepo<SubcategoryModel> subcategoryRepo
@inject GenericRepo<QuestionModel> questionRepo
@inject GenericManager<CategoryModel> genericCategoryManager
@inject GenericManager<SegmentModel> genericSegmentManager
@inject CategoryManager categoryManager
@rendermode InteractiveServer

@* style="display: flex; flex-direction: row; *@
@* style="margin-right: 20px;" *@


<div style="background-image: url('/Images/AdminPageScreen.jpg'); background-size: cover; background-position: center top; height: 100vh; display: flex; flex-direction: column; justify-content: flex-start; align-items: center;">
    <h1 class="text-white display-2">Add Content</h1>
    <div class="flex-row row justify-content-between">
        <div class="col-5">
            <h3 class="text-white display-6">Category</h3>
            <strong class="text-white">Category Name: </strong><input @bind="categoryName"></input>
            <br/>
            <strong class="text-white">Category Description: </strong><input class="form-control input-lg" type="text" @bind="categoryDescription"></input>
            <br/>
            <button @onclick="AddCategory" class="btn btn-primary">Add Category</button>
            <br/>


            @if(Categories.Count > 1)
            {
                var lastCategory = Categories.Last();
                if (Categories.Remove(lastCategory)){};
                
                <p class="text-danger">Only one category may be added at a time.</p>
            }

            @if (isCategoryAdded)
            {
                <p class="text-success">Category added successfully.</p>
            }
                <!-- Display the category list -->
@*             <ul>
                @foreach (var category in Categories)
                {
                    <li class="text-white">@category.CategoryName</li>
                }
            </ul> *@

            
        </div>
        <div class="col-5">
    <h3 class="text-white display-6">Segment</h3>
    <strong class="text-white">Segment Name: </strong><input @bind="segmentName"></input>
    <br/>
    <strong class="text-white">Segment Description: </strong><input class="form-control input-lg" type="text" @bind="segmentDescription"></input>
    <br/>
    <InputSelect @bind-Value="Category.Id">
                @foreach(var category in AllCategories)
                {
                    <option value="@Category.CategoryName">@category.CategoryName</option>
                }
            </InputSelect>
    <button @onclick="AddSegment" class="btn btn-primary">Add Segment</button>
    <br/>

            @if (isSegmentAdded)
            {
                <p class="text-success">Segment added successfully.</p>
            }
            @*     @if (Segments != null)
    {
        <ul>
            @foreach (var segment in Segments)
            {
                 <li class="text-white">@segment.SegmentName</li>
            }
        </ul>
    } *@
    </div>
    </div>
    <div class="flex-row row justify-content-between">
        <div class="col-5">
    <h3 class="text-white display-6">Subcategory</h3>
    <strong class="text-white">Subcategory Name: </strong><input @bind="subcategoryName"></input>
    <br/>
    <strong class="text-white">Subcategory Description: </strong><input class="form-control input-lg" type="text" @bind="subcategoryDescription"></input>
    <br/>
    <button @onclick="AddSubcategory" class="btn btn-primary">Add Subcategory</button>
    <br/>
    @if (Subcategories != null)
    {
        <ul>
            @foreach (var subCategory in Subcategories)
            {
                <li class="text-white">@subCategory.SubCategoryName</li>
            }
        </ul>
    }
        </div>
        <div class="col-5">
    <h3 class="text-white display-6">Questions</h3>
    <strong class="text-white">Question Name: </strong><input @bind="question"></input>
    <br/>
    <button @onclick="AddQuestion" class="btn btn-primary">Add Question</button>
    <br/>
    @if (Questions != null)
    {
        <ul>
            @foreach (var question in Questions)
            {
                <li class="text-white">@question.Question</li>
            }
        </ul>
    }
    <br/>

    <strong class="text-white">Options: </strong><input @bind="option"></input>
@*     <button @onclick="(() => AddOption(option))" class="btn btn-dark">Add Option</button> *@
            <button @onclick="AddOption" class="btn btn-dark">Add Option</button>
    <br/>
    @if(options != null)
    {
        <ul>
        @foreach(string option in options)
        {
            <li class="text-white">@option</li>
        }
        </ul>
    }
    <br/>
    </div>
</div>
    <button @onclick="SubmitForm" class="btn btn-success btn-lg">Submit</button>

</div>

@code {

    private CategoryModel Category { get; set; } = new();
    private List<CategoryModel> Categories { get; set; } = new();
    private List<CategoryModel> AllCategories { get; set; } = new();

    private string? categoryName;
    private string? categoryDescription;

    private bool isCategoryAdded = false;

    private List<SegmentModel> Segments { get; set; } = new();
    private string? segmentName;
    private string? segmentDescription;

    private bool isSegmentAdded = false;

    private List<SubcategoryModel> Subcategories { get; set; } = new();
    private string? subcategoryName;
    private string? subcategoryDescription;

    private List<QuestionModel> Questions { get; set; } = new();
    private string? question;
    private string? option;
    private List<string> options = new();

    public CategoryModel NewCategory { get; set; } = new();
    public SegmentModel NewSegment { get; set; } = new();
    public SubcategoryModel NewSubcategory { get; set; } = new();
    public QuestionModel NewQuestion { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        AllCategories = await genericCategoryManager.GetAllAsync();
    }

    private async Task HandleSubmit()
    {
        await categoryRepo.AddAsync(NewCategory);
        foreach(SegmentModel segment in Segments)
        {
            await segmentRepo.AddAsync(NewSegment);
        }


    }

    private async Task AddCategory()
    {
        // Create a new category and add it to the list
        var newCategory = new CategoryModel { CategoryName = categoryName, Description = categoryDescription };
        Categories.Add(newCategory);
        isCategoryAdded = true;

        await genericCategoryManager.AddAsync(newCategory);

        // Clear input fields
        categoryName = "";
        categoryDescription = "";

    }

    private async Task AddSegment()
    {
        // Create a new segment and add it to the list
        var newSegment = new SegmentModel { SegmentName = segmentName, Description = segmentDescription, CategoryId = Category.Id };
        Segments.Add(newSegment);
        isSegmentAdded = true;

        await genericSegmentManager.AddAsync(newSegment);

        // Clear input fields
        segmentName = "";
        segmentDescription = "";
    }

    private async Task AddSubcategory()
    {
        // Create a new segment and add it to the list
        var newSubcategory = new SubcategoryModel { SubCategoryName = subcategoryName, Description = subcategoryDescription };
        Subcategories.Add(newSubcategory);

        // Clear input fields
        subcategoryName = "";
        subcategoryDescription = "";
    }

    private async Task AddQuestion()
    {
        var newQuestion = new QuestionModel { Question = question, Options = options };
        Questions.Add(newQuestion);

        // Clear input fields
        question = "";
    }

    private async Task AddOption()
    {
        options.Add(option);
        option = "";
    }

    public async Task SubmitForm()
    {
        
    }

    // private sealed class InputModel
    // {
    //     // [Required]
    //     [Display(Name = "Category Name")]
    //     public string CategoryName { get; set; } = "";

    //     [Display(Name = "Category Description")]
    //     public string CategoryDescription { get; set; } = "";

    //     // [SupplyParameterFromForm]
    //     // public List<SegmentModel> Segments { get; set; } = new();

    //     // [Required]
    //     [Display(Name = "Segment Name")]
    //     public string SegmentName { get; set; } = "";

    //     [Display(Name = "Segment Decsription")]
    //     public string SegmentDescription { get; set; } = "";

    //     // [Required]
    //     [Display(Name = "Subcategory Name")]
    //     public string SubcategoryName { get; set; } = "";

    //     [Display(Name = "Subcategory Description")]
    //     public string SubcategoryDescription { get; set; } = "";

    //     public int SegmentCategoryId { get; set; }
    // }


}
