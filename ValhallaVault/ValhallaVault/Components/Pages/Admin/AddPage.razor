@page "/addpage"
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using ValhallaVault.Data.Repository
@using ValhallaVault.Managers
@using ValhallaVault.Models
@attribute [Authorize(Roles = "Admin")]
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider provider
@inject GenericRepo<CategoryModel> categoryRepo
@inject GenericRepo<SegmentModel> segmentRepo
@inject GenericRepo<SubcategoryModel> subcategoryRepo
@inject GenericRepo<QuestionModel> questionRepo
@inject GenericManager<CategoryModel> genericCategoryManager
@inject GenericManager<SegmentModel> genericSegmentManager
@inject GenericManager<SubcategoryModel> genericSubcategoryManager
@inject GenericManager<QuestionModel> genericQuestionManager
@inject CategoryManager categoryManager
@rendermode InteractiveServer


<div style="background-image: url('/Images/AdminPageScreen.jpg'); background-size: cover; background-position: center top; height: 100vh; display: flex; flex-direction: column; justify-content: flex-start; align-items: center;">
    <h1 class="text-white display-2">Add Content</h1>
    <div class="flex-row row justify-content-between">
        <div class="col-5">
            <h3 class="text-white display-6">Category</h3>
            <strong class="text-white">Category Name: </strong><input class="categoryinput" @bind="categoryName"></input>
            <br/>
            <strong class="text-white">Category Description: </strong><input class="form-control input-lg" type="text" @bind="categoryDescription"></input>
            <br/>
            <button @onclick="AddCategory" class="btn btn-primary">Add Category</button>
            <br/>
            
           
            @if(Categories.Count > 1)
            {
                var lastCategory = Categories.Last();
                if (Categories.Remove(lastCategory)){};
                
                <p class="text-danger">Only one category may be added at a time.</p>
            }
                  
           @if (isCategoryEmpty == true)
            {
                <p class="text-danger">Field cannot be empty!</p>
            }

            else if (isCategoryAdded)
            {
                <p class="text-success">Category added successfully.</p>
            }
               
            
        </div>
        <div class="col-5">
    <h3 class="text-white display-6">Segment</h3>
    <strong class="text-white">Segment Name: </strong><input @bind="segmentName"></input>
    <br/>
    <strong class="text-white">Segment Description: </strong><input class="form-control input-lg" type="text" @bind="segmentDescription"></input>
    <br/>
            <strong class="text-white">Select a Category:</strong>
    <select @bind="selectedCategoryId">
                @foreach(var category in AllCategories)
                {
                    <option value="@category.Id">@category.CategoryName</option>
                }
            </select>
    <button @onclick="AddSegment" class="btn btn-primary">Add Segment</button>
    <br/>

            @if (selectedCategoryId == 0)
            {
                <p class="text-danger">Please select a segment</p>
            }
            
            else if (isSegmentEmpty == true)
            {
                <p class="text-danger">Field cannot be empty!</p>
            }

            else if(isSegmentAdded)
            {
                <p class="text-success">Segment added successfully.</p>
            }
          
            
    </div>
    </div>
    <div class="flex-row row justify-content-between">
        <div class="col-5">
    <h3 class="text-white display-6">Subcategory</h3>
    <strong class="text-white">Subcategory Name: </strong><input @bind="subcategoryName"></input>
    <br/>
    <strong class="text-white">Subcategory Description: </strong><input class="form-control input-lg" type="text" @bind="subcategoryDescription"></input>
    <br/>
    <strong class="text-white">Select a Segment:</strong>
            <select @bind="selectedSegmentId">              
                @foreach (var segment in AllSegments)
                {
                    <option value="@segment.Id">@segment.Category.CategoryName : @segment.SegmentName</option>
                }

            </select>
    <button @onclick="AddSubcategory" class="btn btn-primary">Add Subcategory</button>
    <br/>             

            @if (selectedSegmentId == 0)
            {
                <p class="text-danger">Please select a segment</p>
            }

            else if (isSubcategoryEmpty == true)
            {
                <p class="text-danger">Field cannot be empty!</p>
            }

            else if (isSubcategoryAdded)
            {
                <p class="text-success">Segment added successfully.</p>
            }
            
        </div>
        <div class="col-5">
    <h3 class="text-white display-6">Questions</h3>
    <strong class="text-white">Question Name: </strong><input @bind="question"></input>
    <br/>
            <strong class="text-white">Select a Subcategory:</strong>
            <select @bind="selectedSubcategoryId">
                @foreach (var subcategory in AllSubcategories)
                {
                    <option value="@subcategory.Id">@subcategory.SubCategoryName</option>
                }
            </select>
    <br/>
    <br/>

    <strong class="text-white">Options: </strong><input @bind="option"></input>
            <button @onclick="AddOption" class="btn btn-dark">Add Option</button>
    <br/>
            
            @if(options != null)
            {
                <ul class="list-unstyled">
                @foreach(string option in options)
                {
                    <li class="text-white">@option</li>
                }
                </ul>
            }            
            
            @if (isOptionsEmpty == true)
            {
                <p class="text-danger">Field cannot be empty!</p>
            }                  

            else if (isOptionsAdded)
            {
                <p class="text-success">Option added successfully.</p>
            }

    <br/>
    <button @onclick="AddQuestion" class="btn btn-primary">Add Question</button>

            @if (selectedSubcategoryId == 0)
            {
                <p class="text-danger">Please select a subcategory</p>
            }

            else if (isQuestionEmpty == true)
            {
                <p class="text-danger">Field cannot be empty!</p>
            }

            else if (isQuestionAdded)
            {
                <p class="text-success">Segment added successfully.</p>
            }
        </div>
</div>
</div>

@code {

    private CategoryModel Category { get; set; } = new();
    private List<CategoryModel> Categories { get; set; } = new();
    private List<CategoryModel> AllCategories { get; set; } = new();

    private bool isCategoryEmpty = false;
    private bool isSegmentEmpty = false;
    private bool isSubcategoryEmpty = false;
    private bool isQuestionEmpty = false;
    private bool isOptionsEmpty = false;

    private int selectedCategoryId;

    private string? categoryName;
    private string? categoryDescription;

    private bool isCategoryAdded = false;

    private List<SegmentModel> Segments { get; set; } = new();
    private List<SegmentModel> AllSegments { get; set; } = new();
    private string? segmentName;
    private string? segmentDescription;


    private string? selectSegmentPlaceholder = "Pick a segment!";

    private bool isSelected = false;
    private bool isSegmentSelected = false;

    private int selectedSegmentId;

    private bool isSegmentAdded = false;

    private List<SubcategoryModel> Subcategories { get; set; } = new();
    private List<SubcategoryModel> AllSubcategories { get; set; } = new();
    private string? subcategoryName;
    private string? subcategoryDescription;

    private int selectedSubcategoryId;

    private bool isNull = false;

    private bool isSubcategoryAdded = false;

    private List<QuestionModel> Questions { get; set; } = new();
    private string? question;
    private string? option;
    private List<string> options = new();

    private bool isOptionsAdded = false;

    private bool isQuestionAdded = false;

    public CategoryModel NewCategory { get; set; } = new();
    public SegmentModel NewSegment { get; set; } = new();
    public SubcategoryModel NewSubcategory { get; set; } = new();
    public QuestionModel NewQuestion { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        AllCategories = await genericCategoryManager.GetAllAsync();
        AllSegments = await genericSegmentManager.GetAllAsync();
        AllSubcategories = await genericSubcategoryManager.GetAllAsync();
    }

    private async Task HandleSubmit()
    {
        await categoryRepo.AddAsync(NewCategory);
        foreach(SegmentModel segment in Segments)
        {
            await segmentRepo.AddAsync(NewSegment);
        }

    }

    private async Task AddCategory()
    {
        isCategoryEmpty = false;
        if (!string.IsNullOrEmpty((categoryName)))
        {           
            // Create a new category and add it to the list
            var newCategory = new CategoryModel { CategoryName = categoryName, Description = categoryDescription };
            Categories.Add(newCategory);

            await genericCategoryManager.AddAsync(newCategory);

            // To display category added successfully
            isCategoryAdded = true;
            isCategoryEmpty = false;

            categoryName = "";
            categoryDescription = "";
        }
        else
        {
            isCategoryEmpty = true;
        }

    }

    private async Task AddSegment()
    {
        isSegmentEmpty = false;
        if(selectedCategoryId != 0)
        {
            isSelected = true;
            if (!string.IsNullOrEmpty(segmentName))
            {
                var newSegment = new SegmentModel { SegmentName = segmentName, Description = segmentDescription, CategoryId = selectedCategoryId };
                Segments.Add(newSegment);

                await genericSegmentManager.AddAsync(newSegment);

                // To display segment added successfully
                isSegmentAdded = true;
                isSegmentEmpty = false;

                segmentName = "";
                segmentDescription = "";
            }
            else
            {
                isSegmentEmpty = true;
            }
        }        
        else
        {          
            isSelected = false;
        }
        // Clear input fields
    }

    private async Task AddSubcategory()
    {
        isSubcategoryEmpty = false;
        if(selectedSegmentId != 0)
        {
            isSelected = true;
            if (!string.IsNullOrEmpty((subcategoryName)))
            {
                // Create a new segment and add it to the list
                var newSubcategory = new SubcategoryModel { SubCategoryName = subcategoryName, Description = subcategoryDescription, SegmentId = selectedSegmentId };
                Subcategories.Add(newSubcategory);

                await genericSubcategoryManager.AddAsync(newSubcategory);

                // To display subcategory added successfully
                isSubcategoryAdded = true;
                isSubcategoryEmpty = false;

                subcategoryName = "";
                subcategoryDescription = "";
            }
            else
            {
                isSubcategoryEmpty = true;
            }
        }
        else
        {
            isSelected = false;
        }


    }

    private async Task AddQuestion()
    {
        isQuestionEmpty = false;

        if(selectedSubcategoryId != 0)
        {
            isSelected = true;
            if (!string.IsNullOrEmpty(question))
            {
                var newQuestion = new QuestionModel { Question = question, Options = options, SubcategoryId = selectedSubcategoryId };
                Questions.Add(newQuestion);

                await genericQuestionManager.AddAsync(newQuestion);

                // To display question added successfully
                isQuestionAdded = true; 
                isQuestionEmpty = false;

                question = "";
                options.Clear();
            }
            else
            {
                isQuestionEmpty = true;
            }
        }
        else
        {
            isSelected = false;
        }
    }

    private async Task AddOption()
    {
        if(option != null)
        {
            options.Add(option);   
            isOptionsEmpty = false;
        }
        else
        {
            isOptionsEmpty = true;

        }
        option = "";
    }

    private async Task HandleSegmentSelection(ChangeEventArgs e)
    {
        isSelected = true;
    }

}
