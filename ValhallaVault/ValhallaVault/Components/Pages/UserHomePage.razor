@page "/Homepage"
@using ValhallaVault.Data
@using ValhallaVault.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthenticationProvider
@inject ValhallaVault.Managers.UserManager usermanager
@inject ValhallaVault.Managers.GenericManager<CategoryModel> categoryManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ValhallaVault.Managers.QuestionManager questionmanager
@inject ValhallaVault.Managers.GenericManager<QuestionModel> genericQuestionManager
@inject ValhallaVault.Managers.GenericManager<SubcategoryModel> genericSubcategoryManager
@rendermode InteractiveServer

@attribute [Authorize]
<PageTitle>UserPage</PageTitle>

<div class="border rounded mt-5 font-monospace" style="background-color: rgba(0, 15, 89, 0.71); padding: 4%;">
    <h4 class="text-white font-monospace">Välkommen, @Name</h4>
    <h3 class="fw-light text-white font-monospace">Din statistik:</h3>
    <h6 class="text-white font-monospace">Du har svarat på @Questions.Count frågor totalt.</h6>
    <h6 class="text-white font-monospace">Av dessa var @CorrectAnswers rätt, vilket motsvarar @Percentage % rätt.</h6>
    <h6 class="font-monospace fw-bolder text-white mt-2">Notera att respektive avsnitt blir tillgänglig när du fått 80% rätt.</h6>
</div>

<button @onclick="ToggleResultsVisibility" class="btn btn-primary btn-block mb-3 mt-2 font-monospace">Se mina resultat</button>

@if (ShowResults && QuestionSubcategorySegmentTuples.Any())
{
    <div class="table-responsive font-monospace" style="background-color: rgba(0, 15, 89, 0.71);">
        <table class="table font-monospace">
            <thead>
                <tr>
                    <th class="text-white">Fråga ID</th>
                    <th class="text-white">Subkategori ID</th>
                    <th class="text-white">Segment ID</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var tuple in QuestionSubcategorySegmentTuples)
                {
                    <tr>
                        <td class="text-white">@tuple.QuestionId</td>
                        <td class="text-white">@tuple.SubcategoryId</td>
                        <td class ="text-white" >@tuple.SegmentId</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else if (!QuestionSubcategorySegmentTuples.Any())
{
    <p>Inga frågor att visa.</p>
}


<div class="row">
    <div class="col-md-4 d-flex flex-column align-items-center">
        <img src="/Images/fraud.jpg" class="card-img" alt="Background Image" style="object-fit: cover; height: 30vh; border-radius:5px;">
        <a href="@($"CategoryPage/{1}")" class="btn btn-primary btn-block mb-3 m-3">Att skydda sig mot bedrägerier</a>
    </div>
    <div class="col-md-4 d-flex flex-column align-items-center">
        <img src="/Images/security.jpg" class="card-img" alt="Background Image" style="object-fit: cover; height: 30vh; border-radius:5px;">
        @if (Percentage >= 80)
        {
            <a href="@($"CategoryPage/{2}")" class="btn btn-primary btn-block mb-3 m-3">Cybersäkerhet för företag</a>
        }
        else
        {
            <button class="btn btn-primary btn-block mb-3 m-3" disabled>Cybersäkerhet för företag</button>
        }
    </div>
    <div class="col-md-4 d-flex flex-column align-items-center">
        <img src="/Images/fraud.jpg" class="card-img" alt="Background Image" style="object-fit: cover; height: 30vh; border-radius:5px;">
        @if (Percentage >= 80)
        {
            <a href="@($"CategoryPage/{3}")" class="btn btn-primary btn-block mb-3 m-3">Cybersäkerhet för företag</a>
        }
        else
        {
            <button class="btn btn-primary btn-block mb-3 m-3" disabled>Cybersäkerhet för företag</button>
        }
    </div>
</div>

@code {
    public string? Name { get; set; }
    public List<QuestionModel> Questions = new();
    private bool ShowResults = false;
    public int CorrectAnswers;
    private ApplicationUser? signedIn; // representerar den inloggade användaren 
    private AuthenticationState? State; // representerar autentiseringsstatusen för användaren 
    private string searchText = "";
    public int Percentage;
    public List<(int QuestionId, int SubcategoryId, int SegmentId)> QuestionSubcategorySegmentTuples { get; set; } = new List<(int QuestionId, int SubcategoryId, int SegmentId)>();

    private void ToggleResultsVisibility()
    {
        ShowResults = !ShowResults;
    }

    protected async override Task OnInitializedAsync()
    {
        State = await AuthenticationProvider.GetAuthenticationStateAsync();  // Hämta användaren med AuthenticationState
        var user = State.User;
        Name = user.Identity.Name;

        var findtheUser = await usermanager.GetUserByNameAsync(Name);
        if (findtheUser!=null)
        {
            if (findtheUser.UserResults != null && findtheUser.UserResults.Any())   // kolla om usern har några resultat
            {
                foreach (var result in findtheUser.UserResults)
                {
                    QuestionModel question = await genericQuestionManager.GetByIdAsync(result.Result.QuestionId);  // hämta varje fråga.
                    Questions.Add(question);
                    int questionId = question.Id;
                    int subcategoryId = question.SubcategoryId;
                    SubcategoryModel subcategory = await genericSubcategoryManager.GetByIdAsync(subcategoryId);
                    QuestionSubcategorySegmentTuples.Add((questionId, subcategoryId, subcategory.SegmentId));

                    if (result.Result.IsCorrect==true) // Räkna hur många rätt det finns bland resultaten. 
                    {
                        CorrectAnswers++;
                    }  
                }
            }
            // Beräkna procent rätt på alla frågor totalt.  
            float calculation = ((float)CorrectAnswers / (float)Questions.Count) * 100;
            Percentage = (int)calculation;
        }
      

    }
    
}
