@page "/Homepage"
@using ValhallaVault.Data
@using ValhallaVault.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthenticationProvider
@inject ValhallaVault.Managers.UserManager usermanager
@inject ValhallaVault.Managers.GenericManager<CategoryModel> categoryManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ValhallaVault.Managers.QuestionManager questionManager

@attribute [Authorize]
<PageTitle>UserPage</PageTitle>


<h4>Välkommen, @Name</h4>

<h3>Dina resultat:</h3>


<div class="row-cols-4">
    <div> 
       <input placeholder="Search Category" @bind="searchText" @bind:event="oninput" />
    </div>
</div>
<br />
<h2>Nästa kategori låses upp när du fått minst 80% rätt på den föregående.</h2>
<ul>
    <div class="Container1">
        <a href="@($"CategoryPage/{1}")"><h5 class="Category1">Kategori 1: Att skydda sig mot bedrägerier</h5></a>
        <div class="progress" role="progressbar" aria-label="Success example" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">
            <div class="progress-bar bg-success" style="width: 25%">25%</div>
        </div>
    </div>
    <br />
    <div class="Container2">
        <a href="@($"CategoryPage/{2}")"><h5 class="Category1">Kategori 2: Cybersäkerhet för företag</h5></a>
        <div class="progress" role="progressbar" aria-label="Success example" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">
            <div class="progress-bar bg-success" style="width: 25%">25%</div>
        </div>
    </div>
    <br />
    <div class="Container3">
        <a href="@($"CategoryPage/{3}")"><h5 class="Category1">Kategori 3: Cyberspionage</h5></a>
        <div class="progress"role="progressbar" aria-label="Success example" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">
            <div class="progress-bar bg-success" style="width: 25%">25%</div>
        </div>
    </div>
    <br />
</ul>

@code {
    public string? Name { get; set; }
    public List<string> Results { get; set; } = new();
    private ApplicationUser? signedIn; // representerar den inloggade användaren 
    private AuthenticationState? State; // representerar autentiseringsstatusen för användaren 
    private string searchText = "";
    private List<ResultModel>? results;

    protected async override Task OnInitializedAsync()
    {
        // Hämta användarens AuthenticationState 
        State = await AuthenticationProvider.GetAuthenticationStateAsync();
        var user = State.User;
        Name = user.Identity.Name;

        var findtheUser = await usermanager.GetUserByNameAsync(Name);
        if (findtheUser!=null)
        {
            findtheUser = signedIn;
            // kolla om usern har några resultat
            if (findtheUser.UserResults!=null && findtheUser.UserResults.Any())
            {
                foreach (var result in findtheUser.UserResults)
                {
                    Results.Add("Du svarade: " + result.Result.Answer.ToString());
                }
            }
        }
    }

    public async void CalculateResult(int categoryId)
    {
        var amountOfQuestions = await questionManager.GetAllQuestionsInCategoryAsync(categoryId);

        int correctAnswers = 0;
        int percentage = 0;
        if(signedIn.UserResults != null)
        {
            foreach(var result in signedIn.UserResults)
            {
                if (result.Result.IsCorrect)
                {
                    correctAnswers++;                 
                }
            }
            
        }
    
        // int correctAnswers = 5;
        // int counter = 10;
        // int percentage = 0;
        // if(signedIn.UserResults != null)
        // {
        //     foreach(var result in signedIn.UserResults)
        //     {
        //         if (result.Result.IsCorrect)
        //         {
        //             correctAnswers++;
        //         }
        //         counter++;
        //     }

        //     percentage = correctAnswers / counter * 100;
        // }


        // double QuestionsThatMustBeCorrect = 8;
        // QuestionsThatMustBeCorrect = 0.8 / counter;
        // bool isaWholeNumber = false;
        // isaWholeNumber = QuestionsThatMustBeCorrect % counter == 0;

        // if (!isaWholeNumber)
        // {
        //     Math.Round(QuestionsThatMustBeCorrect);
        // }
        //     Console.WriteLine(QuestionsThatMustBeCorrect);

        // int.TryParse(QuestionsThatMustBeCorrect);
        // talet inte är heltal
        // nedrunda nederst till närmsta helttal

        // if antalet rätt => avrundat 
        // == 80% uppfyllt!!!



    }
    
}
