@page "/SegmentPage/{segmentId:int}/{categoryId:int}"
@using ValhallaVault.Models
@using ValhallaVault.Data
@inject ValhallaVault.Managers.GenericManager<SegmentModel> genericManager
@inject ValhallaVault.Managers.GenericManager<ApplicationUser> genericUserManager
@inject ValhallaVault.Managers.SubcategoryManager subcategoryManager
@inject AuthenticationStateProvider AuthenticationProvider
@inject ValhallaVault.Managers.UserManager usermanager
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> SignInManager
@inject ValhallaVault.Managers.CompletedSubcategoryManager completedSubcategoryManager
@inject ValhallaVault.Managers.CompletedSegmentManager completedSegmentmanager



@if (chosenSegment != null)
{
    <div class="card" style="background-color: rgba(0, 15, 89, 0.71); margin-top:1%;">
        <div class="card-body">
            <h5 class="card-title text-white font-monospace">Segments namn: @chosenSegment.SegmentName</h5>
            @if(chosenSegment.Description!=null)
            {
                <p>@chosenSegment.Description</p>
            }
        </div>
    </div>
}

<h6 class="font-monospace">@CompletionMessage</h6>

@if (OpenSubcategories!=null && OpenSubcategories.Any())
{
    <h2 class="font-monospace">Öppna subkategorier</h2>
    foreach (var subcategory in OpenSubcategories)
    {
        <!-- Skicka vidare användaren till subkategorin nedan-->
        <div>
        <a href="@($"QuestionPage/{segmentId}/{subcategory.Id}/{chosenCategory}")">@subcategory.SubCategoryName</a>
        @if (subcategory.Description!=null)
        {
            <p>@subcategory.Description</p>
        }
        </div>
    }
}

@if (ClosedSubcategories != null && ClosedSubcategories.Any())
{
    <h2 class="font-monospace">Låsta subkategorier</h2>
    foreach (var subcategory in ClosedSubcategories)
    {
        <!-- Skicka inte vidare användaren till subkategorins sida med frågor.-->
        <p>@subcategory.SubCategoryName</p>
    }
}

    <a href="@($"CategoryPage/{chosenCategory}")">Tillbaka</a>



@code {

    public int NumberOfSubcategories { get; set; }
    public SegmentModel? chosenSegment { get; set; }
    List<(int, int, int)> UserCompletionIds = new List<(int, int, int)>();
    List<(int, int, int)> AllCompletionIds = new List<(int, int, int)>();
    public List<CompletedSubcategoryModel> CompletedSubcategories = new();
    public string? Name { get; set; }
    private AuthenticationState? State; // representerar autentiseringsstatusen för användaren
    public int chosenCategory { get; set; }
    public List<SubcategoryModel> OpenSubcategories { get; set; } = new();
    public List<SubcategoryModel> ClosedSubcategories { get; set; } = new();
    public ApplicationUser? LoggedInUser;
    public string CompletionMessage = "";

    [Parameter]
    public int segmentId { get; set; }

    [Parameter]
    public int CategoryId { get; set; }


    public async Task CheckIfAllSubcategoriesAreCompleted()
    {
        // Om det finns lika många öppna subkategorier som det finns subkategorier i segmentet, 
        // så betyder det att alla är avklarade.
        int completedSubcategories = OpenSubcategories.Count;
        if (completedSubcategories==NumberOfSubcategories && LoggedInUser!=null && chosenSegment!=null)
        {
            CompletionMessage = "Du har klarat av alla subkategorier i detta segment.";

            // Kontrollera om ett identiskt CompletedSegmentModel redan finns i databasen
            var existingCompletedSegment = await completedSegmentmanager.GetExistingCompletedSegmentAsync(chosenCategory, chosenSegment.Id, LoggedInUser.Id);
            if (existingCompletedSegment == null)
            {
                // Skapa en lista av alla avklarade subcategoryIds
                List<int> subcategoryIds = new();
                foreach (var completedSubcategory in OpenSubcategories)
                {
                    // Lägg till alla subcategoryIds i listan.
                    int subcategoryId = completedSubcategory.Id;
                    subcategoryIds.Add(subcategoryId);
                }

                // Skapa en ny CompletedSegmentModel
                CompletedSegmentModel completedSegment = new CompletedSegmentModel
                    {
                        CategoryId = chosenCategory,
                        ApplicationUser = LoggedInUser,
                        ApplicationUserId = LoggedInUser.Id,
                        SegmentId = chosenSegment.Id,
                        SubcategoryIds = subcategoryIds
                    };

                // Lägg till det avklarade segmentet i användarens lista.
                LoggedInUser.CompletedSegments.Add(completedSegment);
                // Spara i databasen
                await genericUserManager.CompleteAsync();
            }

        }

    }

    protected override async Task OnInitializedAsync()
    {
     

        // Hämta först den inloggade användaren
        State = await AuthenticationProvider.GetAuthenticationStateAsync();
        var user = State.User;
        Name = user.Identity.Name;

        var findtheUser = await usermanager.GetUserByNameAsync(Name);
        if (findtheUser != null)
        {
            LoggedInUser = findtheUser;

            // Hämta användarens alla godkända subkategorier
            var completedSubcategories = await completedSubcategoryManager.GetCompletedSubcategoriesByUserId(findtheUser.Id);
            if (completedSubcategories != null && completedSubcategories.Any())
            {
                foreach (var completedsub in completedSubcategories)
                {
                    // Skapa en ny tupel med de tre int-värdena
                    var completionId = (Convert.ToInt32(completedsub.CategoryId), Convert.ToInt32(completedsub.SegmentId), Convert.ToInt32(completedsub.SubcategoryId));
                    // Lägg till tupeln i listan
                    UserCompletionIds.Add(completionId);
                    CompletedSubcategories.Add(completedsub);

                }
            }
        }

        // Hämta det aktuella segmentet 
        var segment = await genericManager.GetByIdAsync(segmentId);
        if (segment != null)
        {
            chosenSegment = segment;
            chosenCategory = segment.CategoryId;

            // Hämta alla subkategorier i segmentet 
            var allSubcategories = await subcategoryManager.GetSubcategoriesBySegmentIdAsync(segmentId);
            if (allSubcategories != null)
            {
                // Spara antalet subkategorier i en variabel 
                NumberOfSubcategories = allSubcategories.Count;
                foreach (var subcategory in allSubcategories)
                {
                    // Skapa en ny tupel med de tre int-värdena
                    var completionId = (subcategory.Segment.CategoryId, subcategory.SegmentId, subcategory.Id);
                    // Lägg till tupeln i listan
                    AllCompletionIds.Add(completionId);

                    int currentSubcategoryId = subcategory.Id;
                    int previousSubcategoryId = currentSubcategoryId - 1;

                    if (currentSubcategoryId==1)
                    {
                        OpenSubcategories.Add(subcategory); // subkategorin med id = 1 ska alltid vara öppen. 
                    }
                    if (previousSubcategoryId>0)
                    {
                        var tupleToCheck = (subcategory.Segment.CategoryId, subcategory.SegmentId, previousSubcategoryId);

                        // Länka bara till subkategorin om den tidigare subkategorin finns bland användarens avklarade subkategorier.
                        if (UserCompletionIds.Contains(tupleToCheck))
                        {
                            // Lägg till den aktuella subkategorin i listan över öppna subkategorier
                            OpenSubcategories.Add(subcategory);
                        }

                        else if (!UserCompletionIds.Contains(tupleToCheck)) // om användaren inte klarat av den tidigare kategorin, lägg i den stängda subkategori-listan
                        {
                            ClosedSubcategories.Add(subcategory);
                        }
                    }
                    await CheckIfAllSubcategoriesAreCompleted();
                 
                }
            }

        }

       
    }
}
    

