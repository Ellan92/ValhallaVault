@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Identity
@using ValhallaVault.Data
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager 

<header class="header">
    <a href="Homepage" class="logo">Pink Zombies</a>

    <nav class="navbar">
        <a href="Homepage">Home</a>
        <a href="admindashboard">Admin Page</a>

       <AuthorizeView>
           <Authorized>
                <a href="Account/Manage">@context.User.Identity?.Name</a>
                <a href="#">Contact us</a>
@*              <a @onclick=Logout>Logout</a> *@
                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="btn btn-link">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>

           </Authorized>
           <NotAuthorized>

                <a href="Account/Register">Register</a>
                <a href="Account/Login">Login</a>
                <a href="#">Contact us</a>

           </NotAuthorized>
       </AuthorizeView>
       

        <div class="top-row px-4">
            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
        </div>
    </nav>

</header>

@code {


    private string? currentUrl;


    //En metod för att loga ut användaren när man trycker på "Logout"
    //metoden fungerar inte och har därav mig använt mig av en annan metod. Se nedanför.
    // private async Task Logout()
    // {

    //     await SignInManager.SignOutAsync();
    //     NavigationManager.NavigateTo("Account/Login");
    // }

    //

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

}
